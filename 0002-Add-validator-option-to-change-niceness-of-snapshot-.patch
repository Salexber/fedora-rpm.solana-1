From 27cd631820b612d24cdc0efa2abab5ab965d02bf Mon Sep 17 00:00:00 2001
From: Ivan Mironov <mironov.ivan@gmail.com>
Date: Wed, 27 Oct 2021 09:33:40 +0500
Subject: [PATCH 2/4] Add validator option to change niceness of snapshot
 packager thread

---
 Cargo.lock                            |  1 +
 clap-utils/Cargo.toml                 |  1 +
 clap-utils/src/input_validators.rs    | 28 +++++++++++++++++++++++++++
 core/src/snapshot_packager_service.rs |  3 +++
 core/src/test_validator.rs            |  1 +
 core/src/validator.rs                 |  1 +
 core/tests/snapshots.rs               |  2 ++
 ledger-tool/src/main.rs               |  1 +
 local-cluster/tests/local_cluster.rs  |  1 +
 rpc/src/rpc_service.rs                |  1 +
 runtime/src/bank_forks.rs             |  3 +++
 validator/src/main.rs                 | 17 ++++++++++++++--
 12 files changed, 58 insertions(+), 2 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index a575fdb5d564..d77c1b6e3766 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -4444,6 +4444,7 @@ dependencies = [
  "chrono",
  "clap",
  "rpassword",
+ "solana-perf",
  "solana-remote-wallet",
  "solana-sdk",
  "tempfile",
diff --git a/clap-utils/Cargo.toml b/clap-utils/Cargo.toml
index 88f97f3ee7cb..e97567dffeed 100644
--- a/clap-utils/Cargo.toml
+++ b/clap-utils/Cargo.toml
@@ -12,6 +12,7 @@ edition = "2018"
 [dependencies]
 clap = "2.33.0"
 rpassword = "4.0"
+solana-perf = { path = "../perf", version = "=1.8.3" }
 solana-remote-wallet = { path = "../remote-wallet", version = "=1.8.3" }
 solana-sdk = { path = "../sdk", version = "=1.8.3" }
 thiserror = "1.0.21"
diff --git a/clap-utils/src/input_validators.rs b/clap-utils/src/input_validators.rs
index bb9fad17228d..43ca7a2564db 100644
--- a/clap-utils/src/input_validators.rs
+++ b/clap-utils/src/input_validators.rs
@@ -354,6 +354,27 @@ where
     }
 }
 
+pub fn is_niceness_adjustment_valid<T>(value: T) -> Result<(), String>
+where
+    T: AsRef<str> + Display,
+{
+    let adjustment = value.as_ref().parse::<i8>().map_err(|err| {
+        format!(
+            "error parsing niceness adjustment value '{}': {}",
+            value, err
+        )
+    })?;
+    if solana_perf::thread::is_renice_allowed(adjustment) {
+        Ok(())
+    } else {
+        Err(String::from(
+            "niceness adjustment supported only on Linux; negative adjustment \
+             (priority increase) requires root or CAP_SYS_NICE (see `man 7 capabilities` \
+             for details)",
+        ))
+    }
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
@@ -370,4 +391,11 @@ mod tests {
         assert!(is_derivation("a/b").is_err());
         assert!(is_derivation("0/4294967296").is_err());
     }
+
+    #[test]
+    fn test_is_niceness_adjustment_valid() {
+        assert_eq!(is_niceness_adjustment_valid("0"), Ok(()));
+        assert!(is_niceness_adjustment_valid("128").is_err());
+        assert!(is_niceness_adjustment_valid("-129").is_err());
+    }
 }
diff --git a/core/src/snapshot_packager_service.rs b/core/src/snapshot_packager_service.rs
index a2439708f421..fbc5a163b6ed 100644
--- a/core/src/snapshot_packager_service.rs
+++ b/core/src/snapshot_packager_service.rs
@@ -1,4 +1,5 @@
 use solana_gossip::cluster_info::{ClusterInfo, MAX_SNAPSHOT_HASHES};
+use solana_perf::thread::renice_this_thread;
 use solana_runtime::{snapshot_package::AccountsPackage, snapshot_utils};
 use solana_sdk::{clock::Slot, hash::Hash};
 use std::{
@@ -23,6 +24,7 @@ impl SnapshotPackagerService {
         exit: &Arc<AtomicBool>,
         cluster_info: &Arc<ClusterInfo>,
         maximum_snapshots_to_retain: usize,
+        niceness_adj: i8,
     ) -> Self {
         let exit = exit.clone();
         let cluster_info = cluster_info.clone();
@@ -30,6 +32,7 @@ impl SnapshotPackagerService {
         let t_snapshot_packager = Builder::new()
             .name("snapshot-packager".to_string())
             .spawn(move || {
+                renice_this_thread(niceness_adj).unwrap();
                 let mut hashes = vec![];
                 if let Some(starting_snapshot_hash) = starting_snapshot_hash {
                     hashes.push(starting_snapshot_hash);
diff --git a/core/src/test_validator.rs b/core/src/test_validator.rs
index 86fcfd738e1b..2562acbf94c0 100644
--- a/core/src/test_validator.rs
+++ b/core/src/test_validator.rs
@@ -513,6 +513,7 @@ impl TestValidator {
                 archive_format: ArchiveFormat::Tar,
                 snapshot_version: SnapshotVersion::default(),
                 maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+                packager_thread_niceness_adj: 0,
             }),
             enforce_ulimit_nofile: false,
             warp_slot: config.warp_slot,
diff --git a/core/src/validator.rs b/core/src/validator.rs
index 505f9a220768..728f01f853a3 100644
--- a/core/src/validator.rs
+++ b/core/src/validator.rs
@@ -681,6 +681,7 @@ impl Validator {
                     &exit,
                     &cluster_info,
                     snapshot_config.maximum_snapshots_to_retain,
+                    snapshot_config.packager_thread_niceness_adj,
                 );
                 (
                     Some(snapshot_packager_service),
diff --git a/core/tests/snapshots.rs b/core/tests/snapshots.rs
index 0ad024199f29..2c87e3b1ed21 100644
--- a/core/tests/snapshots.rs
+++ b/core/tests/snapshots.rs
@@ -122,6 +122,7 @@ mod tests {
                 archive_format: ArchiveFormat::TarBzip2,
                 snapshot_version,
                 maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+                packager_thread_niceness_adj: 0,
             };
             bank_forks.set_snapshot_config(Some(snapshot_config.clone()));
             SnapshotTestConfig {
@@ -459,6 +460,7 @@ mod tests {
             &exit,
             &cluster_info,
             DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+            0,
         );
 
         let thread_pool = accounts_db::make_min_priority_thread_pool();
diff --git a/ledger-tool/src/main.rs b/ledger-tool/src/main.rs
index 06c51251602c..bbbd26710533 100644
--- a/ledger-tool/src/main.rs
+++ b/ledger-tool/src/main.rs
@@ -696,6 +696,7 @@ fn load_bank_forks(
             archive_format: ArchiveFormat::TarBzip2,
             snapshot_version: SnapshotVersion::default(),
             maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+            packager_thread_niceness_adj: 0,
         })
     };
     let account_paths = if let Some(account_paths) = arg_matches.value_of("account_paths") {
diff --git a/local-cluster/tests/local_cluster.rs b/local-cluster/tests/local_cluster.rs
index 4e1e34eae55d..9085458379ca 100644
--- a/local-cluster/tests/local_cluster.rs
+++ b/local-cluster/tests/local_cluster.rs
@@ -3277,6 +3277,7 @@ fn setup_snapshot_validator_config(
         archive_format: ArchiveFormat::TarBzip2,
         snapshot_version: snapshot_utils::SnapshotVersion::default(),
         maximum_snapshots_to_retain: snapshot_utils::DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+        packager_thread_niceness_adj: 0,
     };
 
     // Create the account paths
diff --git a/rpc/src/rpc_service.rs b/rpc/src/rpc_service.rs
index 42813e51b9d0..5e733d3a7ec3 100644
--- a/rpc/src/rpc_service.rs
+++ b/rpc/src/rpc_service.rs
@@ -600,6 +600,7 @@ mod tests {
                 archive_format: ArchiveFormat::TarBzip2,
                 snapshot_version: SnapshotVersion::default(),
                 maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+                packager_thread_niceness_adj: 0,
             }),
             bank_forks,
             RpcHealth::stub(),
diff --git a/runtime/src/bank_forks.rs b/runtime/src/bank_forks.rs
index c155897553ce..03f705d3b904 100644
--- a/runtime/src/bank_forks.rs
+++ b/runtime/src/bank_forks.rs
@@ -43,6 +43,9 @@ pub struct SnapshotConfig {
 
     // Maximum number of snapshots to retain
     pub maximum_snapshots_to_retain: usize,
+
+    // Thread niceness adjustment for snapshot packager service
+    pub packager_thread_niceness_adj: i8,
 }
 
 pub struct BankForks {
diff --git a/validator/src/main.rs b/validator/src/main.rs
index 26a56948377d..3b4d94ded7e4 100644
--- a/validator/src/main.rs
+++ b/validator/src/main.rs
@@ -10,8 +10,8 @@ use {
     solana_clap_utils::{
         input_parsers::{keypair_of, keypairs_of, pubkey_of, value_of},
         input_validators::{
-            is_keypair, is_keypair_or_ask_keyword, is_parsable, is_pubkey, is_pubkey_or_keypair,
-            is_slot, is_valid_percentage,
+            is_keypair, is_keypair_or_ask_keyword, is_niceness_adjustment_valid, is_parsable,
+            is_pubkey, is_pubkey_or_keypair, is_slot, is_valid_percentage,
         },
         keypair::SKIP_SEED_PHRASE_VALIDATION_ARG,
     },
@@ -1382,6 +1382,16 @@ pub fn main() {
                 .default_value(default_max_snapshot_to_retain)
                 .help("The maximum number of snapshots to hold on to when purging older snapshots.")
         )
+        .arg(
+            Arg::with_name("snapshot_packager_niceness_adj")
+                .long("snapshot-packager-niceness-adjustment")
+                .value_name("ADJUSTMENT")
+                .takes_value(true)
+                .validator(is_niceness_adjustment_valid)
+                .default_value("0")
+                .help("Add this value to niceness of snapshot packager thread. Negative value \
+                      increases priority, positive value decreases priority.")
+        )
         .arg(
             Arg::with_name("minimal_snapshot_download_speed")
                 .long("minimal-snapshot-download-speed")
@@ -2569,6 +2579,8 @@ pub fn main() {
     let maximum_local_snapshot_age = value_t_or_exit!(matches, "maximum_local_snapshot_age", u64);
     let maximum_snapshots_to_retain =
         value_t_or_exit!(matches, "maximum_snapshots_to_retain", usize);
+    let snapshot_packager_niceness_adj =
+        value_t_or_exit!(matches, "snapshot_packager_niceness_adj", i8);
     let minimal_snapshot_download_speed =
         value_t_or_exit!(matches, "minimal_snapshot_download_speed", f32);
     let maximum_snapshot_download_abort =
@@ -2619,6 +2631,7 @@ pub fn main() {
         archive_format,
         snapshot_version,
         maximum_snapshots_to_retain,
+        packager_thread_niceness_adj: snapshot_packager_niceness_adj,
     });
 
     validator_config.accounts_hash_interval_slots =
-- 
2.33.1

