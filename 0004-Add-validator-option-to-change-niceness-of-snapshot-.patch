From 8d83dbd028b6bd8e2ce2ae86d9d5d61de19f2a2f Mon Sep 17 00:00:00 2001
From: Ivan Mironov <mironov.ivan@gmail.com>
Date: Mon, 25 Oct 2021 10:51:34 +0500
Subject: [PATCH 4/5] Add validator option to change niceness of snapshot
 packager thread

Linux only.
---
 Cargo.lock                            |  1 +
 core/Cargo.toml                       |  3 ++
 core/src/snapshot_packager_service.rs | 56 +++++++++++++++++++++++++++
 core/src/test_validator.rs            |  1 +
 core/src/validator.rs                 |  1 +
 core/tests/snapshots.rs               |  2 +
 ledger-tool/src/main.rs               |  1 +
 local-cluster/tests/local_cluster.rs  |  1 +
 rpc/src/rpc_service.rs                |  1 +
 runtime/src/bank_forks.rs             |  3 ++
 validator/src/main.rs                 | 11 ++++++
 11 files changed, 81 insertions(+)

diff --git a/Cargo.lock b/Cargo.lock
index af5d749c9358..b282654b5338 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -4580,6 +4580,7 @@ dependencies = [
  "matches",
  "miow 0.2.2",
  "net2",
+ "nix 0.20.2",
  "num-traits",
  "num_cpus",
  "rand 0.7.3",
diff --git a/core/Cargo.toml b/core/Cargo.toml
index 461f1dceb210..78c34cfdde5d 100644
--- a/core/Cargo.toml
+++ b/core/Cargo.toml
@@ -74,6 +74,9 @@ thiserror = "1.0"
 solana-rayon-threadlimit = { path = "../rayon-threadlimit", version = "=1.8.1" }
 trees = "0.2.1"
 
+[target."cfg(target_os = \"linux\")".dependencies]
+nix = "0.20.0"
+
 [dev-dependencies]
 jsonrpc-core = "18.0.0"
 jsonrpc-core-client = { version = "18.0.0", features = ["ipc", "ws"] }
diff --git a/core/src/snapshot_packager_service.rs b/core/src/snapshot_packager_service.rs
index a2439708f421..4e9f3910dd3b 100644
--- a/core/src/snapshot_packager_service.rs
+++ b/core/src/snapshot_packager_service.rs
@@ -10,6 +10,45 @@ use std::{
     time::Duration,
 };
 
+#[cfg(target_os = "linux")]
+fn nice(adjustment: i8) -> Result<(), nix::errno::Errno> {
+    let error = unsafe {
+        *libc::__errno_location() = 0;
+        let new_niceness = libc::nice(adjustment.into());
+        let errno = *libc::__errno_location();
+        if (new_niceness == -1) && (errno != 0) {
+            errno
+        } else {
+            0
+        }
+    };
+    if error == 0 {
+        Ok(())
+    } else {
+        Err(nix::errno::from_i32(error.into()))
+    }
+}
+
+#[cfg(target_os = "linux")]
+fn change_thread_niceness(adjustment: i8) {
+    // On Linux, the nice value is a per-thread attribute. See `man 7 sched` for details.
+    // Other systems probably should use pthread_setschedprio(), but, on Linux, thread priority
+    // is fixed to zero for SCHED_OTHER threads (which is the default).
+    nice(adjustment)
+        .map_err(|err| {
+            error!("Failed to change thread niceness for snapshot packager service");
+            err
+        })
+        .unwrap();
+}
+
+#[cfg(not(target_os = "linux"))]
+fn change_thread_niceness(adjustment: i8) {
+    if adjustment != 0 {
+        warn!("Unable to change thread niceness for snapshot packager service: only supported on Linux");
+    }
+}
+
 pub type PendingSnapshotPackage = Arc<Mutex<Option<AccountsPackage>>>;
 
 pub struct SnapshotPackagerService {
@@ -23,6 +62,7 @@ impl SnapshotPackagerService {
         exit: &Arc<AtomicBool>,
         cluster_info: &Arc<ClusterInfo>,
         maximum_snapshots_to_retain: usize,
+        thread_niceness_adj: i8,
     ) -> Self {
         let exit = exit.clone();
         let cluster_info = cluster_info.clone();
@@ -30,6 +70,7 @@ impl SnapshotPackagerService {
         let t_snapshot_packager = Builder::new()
             .name("snapshot-packager".to_string())
             .spawn(move || {
+                change_thread_niceness(thread_niceness_adj);
                 let mut hashes = vec![];
                 if let Some(starting_snapshot_hash) = starting_snapshot_hash {
                     hashes.push(starting_snapshot_hash);
@@ -202,4 +243,19 @@ mod tests {
             ArchiveFormat::TarBzip2,
         );
     }
+
+    #[cfg(target_os = "linux")]
+    #[test]
+    fn test_nice() {
+        // No change
+        assert!(nice(0).is_ok());
+
+        // Decrease priority (allowed for unprivileged processes)
+        let result = std::thread::spawn(|| nice(1)).join().unwrap();
+        assert!(result.is_ok());
+
+        // Increase priority (not allowed for unprivileged processes)
+        let result = std::thread::spawn(|| nice(-1)).join().unwrap();
+        assert!(result.is_err());
+    }
 }
diff --git a/core/src/test_validator.rs b/core/src/test_validator.rs
index 86fcfd738e1b..2562acbf94c0 100644
--- a/core/src/test_validator.rs
+++ b/core/src/test_validator.rs
@@ -513,6 +513,7 @@ impl TestValidator {
                 archive_format: ArchiveFormat::Tar,
                 snapshot_version: SnapshotVersion::default(),
                 maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+                packager_thread_niceness_adj: 0,
             }),
             enforce_ulimit_nofile: false,
             warp_slot: config.warp_slot,
diff --git a/core/src/validator.rs b/core/src/validator.rs
index 505f9a220768..728f01f853a3 100644
--- a/core/src/validator.rs
+++ b/core/src/validator.rs
@@ -681,6 +681,7 @@ impl Validator {
                     &exit,
                     &cluster_info,
                     snapshot_config.maximum_snapshots_to_retain,
+                    snapshot_config.packager_thread_niceness_adj,
                 );
                 (
                     Some(snapshot_packager_service),
diff --git a/core/tests/snapshots.rs b/core/tests/snapshots.rs
index 0ad024199f29..2c87e3b1ed21 100644
--- a/core/tests/snapshots.rs
+++ b/core/tests/snapshots.rs
@@ -122,6 +122,7 @@ mod tests {
                 archive_format: ArchiveFormat::TarBzip2,
                 snapshot_version,
                 maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+                packager_thread_niceness_adj: 0,
             };
             bank_forks.set_snapshot_config(Some(snapshot_config.clone()));
             SnapshotTestConfig {
@@ -459,6 +460,7 @@ mod tests {
             &exit,
             &cluster_info,
             DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+            0,
         );
 
         let thread_pool = accounts_db::make_min_priority_thread_pool();
diff --git a/ledger-tool/src/main.rs b/ledger-tool/src/main.rs
index e1841d8ed74c..7658edb7dcf6 100644
--- a/ledger-tool/src/main.rs
+++ b/ledger-tool/src/main.rs
@@ -697,6 +697,7 @@ fn load_bank_forks(
             archive_format: ArchiveFormat::TarBzip2,
             snapshot_version: SnapshotVersion::default(),
             maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+            packager_thread_niceness_adj: 0,
         })
     };
     let account_paths = if let Some(account_paths) = arg_matches.value_of("account_paths") {
diff --git a/local-cluster/tests/local_cluster.rs b/local-cluster/tests/local_cluster.rs
index 4e1e34eae55d..9085458379ca 100644
--- a/local-cluster/tests/local_cluster.rs
+++ b/local-cluster/tests/local_cluster.rs
@@ -3277,6 +3277,7 @@ fn setup_snapshot_validator_config(
         archive_format: ArchiveFormat::TarBzip2,
         snapshot_version: snapshot_utils::SnapshotVersion::default(),
         maximum_snapshots_to_retain: snapshot_utils::DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+        packager_thread_niceness_adj: 0,
     };
 
     // Create the account paths
diff --git a/rpc/src/rpc_service.rs b/rpc/src/rpc_service.rs
index 531ca3733528..69e8db83c22a 100644
--- a/rpc/src/rpc_service.rs
+++ b/rpc/src/rpc_service.rs
@@ -599,6 +599,7 @@ mod tests {
                 archive_format: ArchiveFormat::TarBzip2,
                 snapshot_version: SnapshotVersion::default(),
                 maximum_snapshots_to_retain: DEFAULT_MAX_SNAPSHOTS_TO_RETAIN,
+                packager_thread_niceness_adj: 0,
             }),
             bank_forks,
             RpcHealth::stub(),
diff --git a/runtime/src/bank_forks.rs b/runtime/src/bank_forks.rs
index 012f7244fd7c..6bd04f399301 100644
--- a/runtime/src/bank_forks.rs
+++ b/runtime/src/bank_forks.rs
@@ -43,6 +43,9 @@ pub struct SnapshotConfig {
 
     // Maximum number of snapshots to retain
     pub maximum_snapshots_to_retain: usize,
+
+    // Thread niceness adjustment for snapshot packager service
+    pub packager_thread_niceness_adj: i8,
 }
 
 pub struct BankForks {
diff --git a/validator/src/main.rs b/validator/src/main.rs
index 368fa2d6a9e4..ea42eb85f0da 100644
--- a/validator/src/main.rs
+++ b/validator/src/main.rs
@@ -1382,6 +1382,14 @@ pub fn main() {
                 .default_value(default_max_snapshot_to_retain)
                 .help("The maximum number of snapshots to hold on to when purging older snapshots.")
         )
+        .arg(
+            Arg::with_name("snapshot_packager_thread_niceness_adj")
+                .long("snapshot-packager-thread-niceness-adjustment")
+                .value_name("NICE")
+                .takes_value(true)
+                .default_value("0")
+                .help("Add this value to thread niceness of snapshot packager service.")
+        )
         .arg(
             Arg::with_name("minimal_snapshot_download_speed")
                 .long("minimal-snapshot-download-speed")
@@ -2549,6 +2557,8 @@ pub fn main() {
     let maximum_local_snapshot_age = value_t_or_exit!(matches, "maximum_local_snapshot_age", u64);
     let maximum_snapshots_to_retain =
         value_t_or_exit!(matches, "maximum_snapshots_to_retain", usize);
+    let snapshot_packager_thread_niceness_adj =
+        value_t_or_exit!(matches, "snapshot_packager_thread_niceness_adj", i8);
     let minimal_snapshot_download_speed =
         value_t_or_exit!(matches, "minimal_snapshot_download_speed", f32);
     let maximum_snapshot_download_abort =
@@ -2599,6 +2609,7 @@ pub fn main() {
         archive_format,
         snapshot_version,
         maximum_snapshots_to_retain,
+        packager_thread_niceness_adj: snapshot_packager_thread_niceness_adj,
     });
 
     validator_config.accounts_hash_interval_slots =
-- 
2.33.0

